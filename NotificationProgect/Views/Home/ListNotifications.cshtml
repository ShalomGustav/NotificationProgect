@model ToDoModel[]


<div class="container">
    <style>
        body {
            background-color: #f4f4f4;
            font-family: 'Raleway', sans-serif;
            margin: 0;
            padding: 0;
        }

        .container {
            padding: 20px;
            max-width: 1000px;
            margin: 0 auto;
            text-align: center;
        }

        h2 {
            color: #333;
            margin-bottom: 20px;
        }

        .button-container {
            display: flex;
            justify-content: space-around; 
            flex-wrap: wrap; 
            margin-bottom: 20px;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 12px 20px;
            min-width: 200px;
            height: 50px;
            color: #fff;
            font-weight: 700;
            border-radius: 5px;
            text-transform: uppercase;
            margin: 10px;
            overflow: hidden;
            position: relative;
            background: #ff6600;
            border: none;
            cursor: pointer;
            z-index: 0;
            transition: background 0.4s ease, color 0.4s ease;
        }

            .btn::before {
                content: "";
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: linear-gradient(120deg, transparent, #00fffc, transparent);
                transform: translateX(-100%);
                transition: transform 0.6s ease;
                z-index: -1;
            }

            .btn:hover::before {
                transform: translateX(100%);
            }

            .btn:hover {
                background: transparent;
                box-shadow: 0 0 20px 5px #00fffc;
                color: #000; 
            }

        .search-container {
            display: none; 
            flex-direction: column;
            align-items: center; 
            margin-top: 10px; 
        }

        .search-date {
            margin-top: 10px;
        }

        .search-button {
            margin-top: 10px; 
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        table, th, td {
            border: 1px solid #ddd;
        }

        th, td {
            padding: 12px;
            text-align: center;
        }

        th {
            background-color: #ff6600;
            color: #000;
        }

        td {
            background-color: #fff;
        }
    </style>

    <h2>Мой список заметок</h2>

    <div class="button-container">
        <button class="btn">Добавить</button>
        <button class="btn">Удалить</button>
        <button class="btn" onclick="toggleSearchDate()">Поиск по дате создания</button>

        <div id="searchContainer" style="display: flex; flex-direction: column; align-items: center;">
            <input type="date" class="search-date" id="searchDate">
            <button class="btn" onclick="searchByDate()">Поиск</button>
        </div>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Дата создания</th>
                <th>Дата начала</th>
                <th>Дата окончания</th>
                <th>Имя</th>
                <th>Описание</th>
                <th>Выполнение</th>
                <th>Контакт</th>
                <th>Тип</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.CreateDate</td>
                    <td>@item.StartDate</td>
                    <td>@item.EndDate</td>
                    <td>@item.Name</td>
                    <td>@item.Description</td>
                    <td>@(item.Complited ?? false ? "Выполнено" : "Не выполнено")</td>
                    <td>@item.Contact</td>
                    <td>@item.Type</td>
                </tr>
            }
        </tbody>
    </table>

    <script>
        function toggleSearchDate() {
            const searchContainer = document.getElementById('searchContainer');
            searchContainer.style.display = (searchContainer.style.display === 'none' || searchContainer.style.display === '') ? 'flex' : 'none';
        }

        async function searchByDate() {
            const dateValue = document.getElementById('searchDate').value;

            
            if (dateValue) {
                try {
                    const response = await fetch(`/getToDoTest?searchDate=${dateValue}`, {
                        method: 'GET'
                    });

                    if (!response.ok) {
                        throw new Error('Ошибка сети при получении данных');
                    }

                    const filteredItems = await response.json();

                    
                    const tbody = document.querySelector('table tbody');
                    tbody.innerHTML = ''; 

                    filteredItems.forEach(item => {
                        const row = `
                            <tr>
                                <td>${item.createDate}</td>
                                <td>${item.startDate}</td>
                                <td>${item.endDate}</td>
                                <td>${item.name}</td>
                                <td>${item.description}</td>
                                <td>${item.complited ? 'Выполнено' : 'Не выполнено'}</td>
                                <td>${item.contact}</td>
                                <td>${item.type}</td>
                            </tr>`;
                        tbody.insertAdjacentHTML('beforeend', row);
                    });
                } catch (error) {
                    alert('Ошибка при поиске заметок: ' + error.message);
                }
            } else {
                alert('Пожалуйста, выберите дату для поиска.');
            }
        }
    </script>
</div>


